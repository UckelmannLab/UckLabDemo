extends layout

include mixins/_chosenTestCard
include mixins/_resultLine

block content
  script(src='/javascripts/indexeddb/idb.js' nonce=`${noncevalue}`)
  script(src='/javascripts/indexeddb/utility.js' nonce=`${noncevalue}`)
  .inner
    p
    header.top
      nav.nav
        .nav__section.nav__section--pages
          li.nav__item: a.nav__link(href="/projects", class=(currentPath.startsWith('/projects') ? 'nav__link--active' : '')) #{layout.projects}
          li.nav__item: a.nav__link(href="/constructor", class=(currentPath.startsWith('/constructor') ? 'nav__link--active' : '')) #{layout.chooseTasks}
          li.nav__item: a.nav__link(href="/tasks", class=(currentPath.startsWith('/tasks') ? 'nav__link--active' : '')) #{layout.customizeParameters}
          li.nav__item: a.nav__link(href="/invitations", class=(currentPath.startsWith('/invitations') ? 'nav__link--active' : '')) #{layout.invitations}
          li.nav__item: a.nav__link(href="/notifications", class=(currentPath.startsWith('/notifications') ? 'nav__link--active' : '')) #{layout.notifications}
          li.nav__item: a.nav__link(href="/testing", class=(currentPath.startsWith('/testing') ? 'nav__link--active' : '')) #{layout.tryDemo}
          li.nav__item: a.nav__link(href="/results", class=(currentPath.startsWith('/results') ? 'nav__link--active' : '')) #{layout.demoResults}
    p
    .userTable

      if project && project.name
        h2 #{`${project.name}`}
      else
        h2 #{layout.customizeParameters}
        .card
          p !{l.create_your_project}

      .program
      
        .card 
          h5= `Custom study parameters (beta)`
          
          p !{`Creating study parameters is a new feature which we are currently testing. You can define parameters which will be available for all tasks in the study <strong>${project.name}</strong>. `}
            | !{`You can also randomize these parameters across your participants. `}
          p !{`To use it, first, add a new parameter below by entering the name of the parameter and clicking <em>Add</em>. `}
            | !{`This parameter will be available inside all tasks of this study under the name this.parameters.parameterName. `}
            | !{`For example, you can create a parameter with the name <em>experimentalCondition</em>. `}
            | !{`Then, inside of each task in the study, you can get this parameter with <code>this.parameters.experimentalCondition.</code> ` }
          p !{`After you added the new parameter, you can enter the value of this parameter. `}  
            | !{`Here is where randomization comes into play. If you need several conditions, separate them by a comma. ` }
            | !{`For example, if you enter <em>baseline, treatment</em> into the field, then for one group of participants the value of the parameter <em>experimentalCondition</em> will be <em>baseline</em>, and for the other group the value will be <em>treatment</em>. ` }
            | !{`Click at the end the button "Update study parameters" to save your changes. ` }
          p !{`In the current moment, randomization is done with the equal probability for each value to be assigned to each participant. `}  
            | !{`In the future, we plan to extend the functionality to accomodate more complicated designs. ` }
            | !{`Let us know about your needs, and we will be happy to help. ` }
          p !{`The parameter value will be accessible for you in the table of all participants (under the tab "Data" in the top navigation bar). `}  
            | !{`If you don't need randomization across participants, you still can use constant parameters. ` }
            | !{`For that, do not use the comma in the value of parameter. ` }
            | !{`If you want to delete a study parameter, clear the field and click the button "Update study parameters". ` }
          
          form(action=`/parameters/study/${project._id}` method = 'POST' id ="myStudyParametersForm")
            
            p
            each parameter in project.parameters 
              .formsforparameters
                label(for= parameter.name class="parameterLabel") #{parameter.name}
                input(type='text' name= parameter.name value= parameter.template && parameter.template.join(','))
                select(name=`${parameter.name}-$mode$`)
                  - var options = [{value: 'random', label: 'With replacement'}, {value: 'urnBefore', label: 'Without replacement (update with the start of the task)'},{value: 'urnAfter', label: 'Without replacement (update after the task completion)'}]
                  each option in options
                    option(value=option.value, selected=(parameter.mode === option.value))= option.label
                
                label Variables that are left in the urn
                input(type='text' name=`${parameter.name}-$sample$` value= parameter.sample && parameter.sample.join(','))

            script(nonce=`${noncevalue}`).
              document.addEventListener('DOMContentLoaded', function (){
                document.getElementById('addStudyParameterFieldButton').addEventListener('click', function addField() {
                  var container_form = document.getElementById("myStudyParametersForm");
                  var nameOfNewField = document.getElementById("new_study_field").value;
                  var input = document.createElement("input");
                  input.type = "text";
                  input.name = nameOfNewField;
                  var new_field_holder = document.createElement("div");
                  new_field_holder.className = 'formsforparameters';
                  var label = document.createElement('label');
                  label.innerText = nameOfNewField;
                  label.classList.add('parameterLabel');
                  var selectMode = document.createElement("select");
                  selectMode.name = `${nameOfNewField}-$mode$`;
                  var selectOptions = [{value: 'random', label: 'With replacement'}, {value: 'urnBefore', label: 'Without replacement (update with the start of the task)'},{value: 'urnAfter', label: 'Without replacement (update after the task completion)'}]
                  for (let option of selectOptions) {
                    var opt = document.createElement("option");
                    opt.value = option.value;
                    opt.text = option.label;
                    selectMode.appendChild(opt);
                  }
                  new_field_holder.appendChild(label);
                  new_field_holder.appendChild(input);
                  new_field_holder.appendChild(selectMode);
                  container_form.appendChild(new_field_holder);
                });
              });
          p
          h5 Add new parameter
          input(type="text" name= "new_study_field" id="new_study_field" value="name of the new study parameter")
          button.button(type="button" value="Add a field" id="addStudyParameterFieldButton") #{l.add}
          
          input.nav__link(type='submit' value=`Update study parameters` form="myStudyParametersForm" class="button" style='margin-top: 20px')
          
          
        
        .tasks
          .card
            .items
              if projectTests && projectTests.length && projectTests.length > 0
                each test in projectTests
                  +chosenTestCard(test)
        
      
        if(allParams && allParams != 'nope' && allParams.length > 0)
          .card
            form(action=`/tasks/${test.slug}/upload` method = 'GET' id="uploadSavedParametersForm" style ="display:grid; grid-template-columns: 1fr auto auto; grid-gap: 20px;")
              .selectorOfParameters
                h6= l.savedParameters
                .custom-select-parameters
                  select(name="savedParameter" id="savedParameter")
                    - const savedParameterId = savedParameter && savedParameter != 'nope' && savedParameter._id ? savedParameter._id.toString(): 'nope';
                    option(value='')= l.chooseSavedParameters
                    each parameter in allParams
                      option(value=parameter._id, selected=(savedParameterId === parameter._id.toString()))= `${parameter.slug} (${parameter.language}) ${h.moment(parameter.created).locale(language).format("MMM Do YY, H:mm")}`

              input(type='submit' value=l.upload class="button" style='margin-top: 20px; width: min-content;')

              if(savedParameter && savedParameter != 'nope')
                a(href=`/parameters/delete/${savedParameter._id}`)
                  .button(style="background:red; width:fit-content; color:white; margin-top: 20px;")= l.delete

        .card
          .parameters
            if(param_language)
              script(nonce=`${noncevalue}`).
                document.addEventListener('DOMContentLoaded', function (){
                  if(document.getElementById('activeLanguageParameter')){
                    document.getElementById('activeLanguageParameter').addEventListener('change', function activateLanguage() {
                      const param_language = document.getElementById("activeLanguageParameter").value;
                      window.location.href = `/tasks/!{slug}/modified/${param_language}`
                    });
                  }
                });

            if(original === 'nope' && modified === 'nope' && savedParameter == 'nope')
              if(test && test.description)
                h5= `Description of ${test.name}`
                p= test.description
              if (test.version)
                p= `${l.version}: ${test.version}`
              if (test.script)
                p= `${l.edit_uploaded}: ${test.script}`
              if (test.params && test.params.length > 0)
                p= `${l.task_has_parameters}`

            if(original && original != 'nope')
              if(original === 'empty' || original.length == 0)
                h5= `${l.subtitle_no_parameters} ${test.name}`
              else
                h5= `${l.subtitle_parameters} ${test.name}`
                - const sortedData = original.sort(function(a,b) {return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);} );
                each key in sortedData
                  .formsforparameters
                    label(for= key.name)
                      strong #{key.name}
                    label(for= key.name) #{key.value}

            if(modified && modified != 'nope' || savedParameter && savedParameter != 'nope')
              label(for="language") #{l.language}
              .custom-select
                select(name="param_language" id="activeLanguageParameter")
                  - var options = [{value: 'english', label: 'English'}, {value: 'german', label: 'Deutsch'}, {value: 'russian', label: 'Русский'}]
                  each option in options
                    option(value=option.value, selected=(param_language === option.value))= option.label

              if(modified === 'empty' || modified.length == 0 || modified === 'nope')
                if(savedParameter && savedParameter != 'nope')
                  form(action=`/tasks/${test._id}/${test.slug}/${savedParameter.language}` method = 'POST' id ="myForm")
                    input(type='submit' value=`${l.apply} ${test.name}` class="button" style='margin-top: 20px;')
                    h5= `${l.savedParametersFor} ${savedParameter.slug} (${savedParameter.language})`
                    p
                    each key in Object.keys(savedParameter.parameters).sort()
                      .formsforparameters
                        label(for= key) #{key}
                        input(type='text' name= key value= savedParameter.parameters[key])
                else
                  if(test && test.params && test.params.length != 0)
                    - let sortedData = test.params.sort(function(a,b) {return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);} );
                    form(action=`/tasks/${test._id}/${test.slug}/${param_language}` method = 'POST' id ="myForm")
                      input.nav__link(type='submit' value=`${l.save} ${test.name}` class="button" style='margin-top: 20px')
                      p
                        | #{l.subtitle_no_customized_1}
                        strong #{test.name}
                        | .
                        |
                        | #{l.subtitle_no_customized_2}
                      p
                      each key in sortedData
                        .formsforparameters
                          label(for= key.name) #{key.name}
                          input(type='text' name= key.name value= key.value)

              else
                form(action=`/tasks/${test._id}/${test.slug}/${param_language}` method = 'POST' id ="myForm")
                  input.nav__link(type='submit' value=`${l.update} ${test.name}` class="button" style='margin-top: 20px')
                  h5= `${l.subtitle_customized} ${test.name}`
                  p
                  each key in Object.keys(modified).sort()
                    .formsforparameters
                      label(for= key) #{key}
                      input(type='text' name= key value= modified[key])

                  script(nonce=`${noncevalue}`).
                    document.addEventListener('DOMContentLoaded', function (){
                      document.getElementById('addFieldButton').addEventListener('click', function addField() {
                        var container_form = document.getElementById("myForm");
                        var nameOfNewField = document.getElementById("new_field").value;
                        var input = document.createElement("input");
                        input.type = "text";
                        input.name = nameOfNewField;
                        var new_field_holder = document.createElement("div");
                        new_field_holder.className = 'formsforparameters';
                        var label = document.createElement('label');
                        label.innerText = nameOfNewField;
                        new_field_holder.appendChild(label);
                        new_field_holder.appendChild(input);
                        container_form.appendChild(new_field_holder);
                      });
                    });
                p
                h5 #{l.addField}
                input(type="text" name= "new_field" id="new_field" value=l.nameForNewParameter)
                button.button(type="button" value="Add a field" id="addFieldButton") #{l.add}

            
        


      //- pre= h.dump(project)
      //- pre= h.dump(slug)
      //- pre= h.dump(original)
      //- pre= h.dump(modified)
